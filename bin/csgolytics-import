#!/usr/bin/env ruby
$: << ::File::expand_path("../../lib", __FILE__)

require "rubygems"
require "yaml"
require 'optparse'
require 'eventql'
require 'webrick'
require "csgolytics/schema_manager"
require "csgolytics/feed_upload"
require "csgolytics/log_reader"

# parse flags
flags = {}

flag_parser = OptionParser.new do |opts|
  opts.banner = "Usage: csgolytics [options]"

  opts.on("--logdir=PATH", "/path/to/csgo/log") do |val|
    flags[:logdir] = val
  end

  opts.on("--server_id=ID", "my_csgo_server_id") do |val|
    flags[:server_id] = val
  end

  opts.on("--eventql_host=HOST", "EventQL host") do |val|
    flags[:eventql_host] = val
  end

  opts.on("--eventql_port=PORT", "EventQL port") do |val|
    flags[:eventql_port] = val
  end

  opts.on("--eventql_database=DATABASE", "EventQL database") do |val|
    flags[:eventql_database] = val
  end

  opts.on("--eventql_auth_token=TOKEN", "EventQL auth_token") do |val|
    flags[:eventql_auth_token] = val
  end

  opts.on("-v", "--[no-]verbose", "Print debug output") do |val|
    flags[:verbose] = val
  end

  opts.on("-h", "--help", "You're reading it") do
    puts opts
    exit 0
  end

end

flag_parser.parse!

# check arguments
unless File.directory?(flags[:logdir])
  $stderr.puts "ERROR: #{flags[:logdir]} is not a directory"
  exit 1
end

# init eventql client
$stderr.puts "Connecting to EventQL at #{flags[:eventql_host]}"
db = EventQL.connect(
  :host => flags[:eventql_host],
  :port => flags[:eventql_port],
  :database => flags[:eventql_database],
  :auth_token => flags[:eventql_auth_token]
)

# migrate database
schema_manager = CSGOLytics::SchemaManager.new(
    db,
    ::File::expand_path("../../db", __FILE__))

schema_manager.migrate!

# start feed upload
feed_upload = CSGOLytics::FeedUpload.new(db, flags[:server_id])

# start log reader
log_reader = CSGOLytics::LogReader.new(flags[:logdir])
log_reader.on_logline do |l|
  feed_upload.insert_logline(l)
end

log_reader.start


